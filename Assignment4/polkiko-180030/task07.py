# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage + "/resources/example6.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""
#  Subject          Predicate           Object
#   ?????   --->    subClassOf   --->   Person
# With RDFLib:
print("7.1 Result with RDFLib: ")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s)

# With SPARQL:
q1 = prepareQuery('''
    SELECT ?s
    WHERE {
        ?s rdfs:subClassOf ns:Person
    }
    ''',
    initNs = {"rdfs": RDFS, "ns": ns}
 )

result = g.query(q1)

print("7.1 Result with SPARQL: ")
for r in result:
    print(r.s)
print("")

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""
#  Subject          Predicate           Object
#     X     --->    subClassOf   --->   Person
# For each X:
#     Y     --->        type     --->      X
# AND
#  Subject          Predicate           Object
#     X     --->        type     --->   Person

# With RDFLib:
print("7.2 Result with RDFLib: ")
for s1, p1, o1 in g.triples((None, None, ns.Person)):       # Gets all of Person
    if p1 == RDFS.subClassOf:                               # If predicated is subClassOf, then
        for s2, p2, o2 in g.triples((None, RDF.type, s1)):  # For each object, gets the subject (a person) and print it
            print(s2)
    elif p1 == RDF.type:   # If predicated is type (is directly a person), print it
        print(s1)


# With SPARQL:
q2 = prepareQuery('''
    SELECT ?s1 ?s3
    WHERE {
        { 
            ?s1 rdf:type ns:Person
        } UNION {
            ?s2 rdfs:subClassOf ns:Person .
            ?s3 rdf:type ?s2
        }
    }
    ''',
    initNs = {"rdf": RDF, "rdfs": RDFS, "ns": ns}
 )

result2 = g.query(q2)

print("7.2 Result with SPARQL: ")
for r2 in result2:
    if r2.s1 is not None:
        print(r2.s1)
    else:
        print(r2.s3)
print("")

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**"""
#  Subject          Predicate           Object
#     X     --->    subClassOf   --->   Person
# For each X:
#     Y     --->        type     --->      X
# And then all atributes
# AND
#  Subject          Predicate           Object
#     X     --->        type     --->   Person
# And then all atributes

# With RDFLib:
print("7.3 Result with RDFLib: ")
for s1, p1, o1 in g.triples((None, None, ns.Person)):       # Gets all of Person
    if p1 == RDFS.subClassOf:                               # If predicated is subClassOf, then
        for s2, p2, o2 in g.triples((None, RDF.type, s1)):  # For each object, gets the subject (a person) and print it
            for s3, p3, o3 in g.triples((s2, None, None)):
                print(s3, p3, o3)
    elif p1 == RDF.type:   # If predicated is type (is directly a person), print it
        for s3, p3, o3 in g.triples((s1, None, None)):
            print(s3, p3, o3)

# With SPARQL:
q3 = prepareQuery('''
    SELECT ?person ?p ?o
    WHERE {
        { 
            ?person rdf:type ns:Person . 
            ?person ?p ?o
        } UNION {
            ?x rdfs:subClassOf ns:Person .
            ?person rdf:type ?x .
            ?person ?p ?o
        }
    }
    ''',
    initNs = {"rdf": RDF, "rdfs": RDFS, "ns": ns}
 )

result3 = g.query(q3)

print("7.3 Result with SPARQL: ")
for r3 in result3:
    print(r3.person, r3.p, r3.o)
print("")