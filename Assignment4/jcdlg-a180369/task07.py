# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KpP1jHojSZgNsRBwC3rU9CxWlndSHeuI

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)


from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
  SELECT 
    ?Subject
  WHERE { 
    ?Subject rdfs:subClassOf ns:Person
  }
  ''',
  initNs = {"rdfs": RDFS, "ns": ns}
)
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss,pp,oo in g.triples((None, RDF.type, s)):
    print(ss)


q2 = prepareQuery('''
  SELECT 
    ?Subject
  WHERE { 
    {
      ?Subject rdf:type ns:Person
    } 
    UNION
    {
     ?Person rdfs:subClassOf ns:Person.
     ?Subject rdf:type ?Person
    }
  }
  ''',
  initNs = {"rdf": RDF, "ns": ns}
)

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

for s,p,o in g.triples((None, RDF.type, ns.Person)):
  for ss,pp,oo in g.triples((s, None, None)):
    print(ss,pp,oo)

for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss,pp,oo in g.triples((None, RDF.type, s)):
    for sss,ppp,ooo in g.triples((ss, None, None)):
      print(sss,ppp,ooo)


q3 = prepareQuery('''
  SELECT 
    ?Subject ?Pred ?Obj
  WHERE { 
    {
      ?Subject rdf:type ns:Person.
      ?Subject ?Pred ?Obj
    } 
    UNION
    {
     ?Person rdfs:subClassOf ns:Person.
     ?Subject rdf:type ?Person.
     ?Subject ?Pred ?Obj
    }
  }
  ''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": ns}
)

for r in g.query(q3):
  print(r)